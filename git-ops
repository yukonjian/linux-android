1.git branch
git branch  不带参数：列出本地已经存在的分支，并且在当前分支的前面用"*"标记
git branch -r  查看远程版本库分支列表
git branch dev  创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支
git branch -d dev 删除dev分支，如果在分支中有一些未merge的提交，那么会删除分支失败，
此时可以使用 git branch -D dev：强制删除dev分支，
git branch -m oldName newName  给分支重命名

2.Git checkout
git checkout filename 放弃单个文件的修改
git checkout . 放弃当前目录下的修改
git checkout master 将分支切换到master
git checkout -b master 如果分支存在则只切换分支，若不存在则创建并切换到master分支
git checkout --help

2.log
git log -p -2 // -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新

git log --name-status //查看修改了那些文件

git show <commit id> //查看某次commit的修改

3.查看远程分支
git branch -a


4.git push后报错

No refs in common and none specified; doing nothing.
Perhaps you should specify a branch such as 'master'.
fatal: The remote end hung up unexpectedly
error: failed to push some refs to 'git@xxxxxxx'

此报错意思为git不知道您当前提交的版本
解决办法：git push origin master

5.git add -f

6.在git中不检查文件权限
在git库中 .git文件夹下的config文件中的filemode = false

7.git tag 打标签
1) 显示所有的tag
git tag
2) 打标签
轻量级的（lightweight）
git tag [tagname]
含附注的（annotated）
git tag -a [tagname] -m "注释"
3) 显示标签的修改
git show [tagname]
4) 将tag推送到远端服务器上
git push origin [tagname]
5) 删除标签
git tag -d [tagname]
6) 删除远程标签
git push origin :refs/tags/[tagname]

8. git删除远程仓库的文件或目录
git rm -r --cached a/2.txt
git commit -m "rmove file"
git push

9. 删除git add 的文件
一种是 git rm --cached "文件路径"，不删除物理文件，仅将该文件从缓存中删除；
一种是 git rm --f "文件路径"，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。
