1.git branch
git branch  不带参数：列出本地已经存在的分支，并且在当前分支的前面用"*"标记
git branch -r  查看远程版本库分支列表
git branch dev  创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支
git branch -d dev 删除dev分支，如果在分支中有一些未merge的提交，那么会删除分支失败，
此时可以使用 git branch -D dev：强制删除dev分支，
git branch -m oldName newName  给分支重命名

2.Git checkout
git checkout filename 放弃单个文件的修改
git checkout . 放弃当前目录下的修改
git checkout master 将分支切换到master
git checkout -b master 如果分支存在则只切换分支，若不存在则创建并切换到master分支
git checkout --help

2.log
git log -p -2 // -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新

git log --name-status //查看修改了那些文件

git show <commit id> //查看某次commit的修改

3.查看远程分支
git branch -a


4.git push后报错

No refs in common and none specified; doing nothing.
Perhaps you should specify a branch such as 'master'.
fatal: The remote end hung up unexpectedly
error: failed to push some refs to 'git@xxxxxxx'

此报错意思为git不知道您当前提交的版本
解决办法：git push origin master

5.拉远程仓库
git pull origin master
5.1 推送本地分支到远程仓库
git push --set-upstream origin 分支名
5.2 将远程git仓库里的指定分支拉取到本地
git checkout -b 本地分支名 origin/远程分支名
注：如果出现提示：
fatal: Cannot update paths and switch to branch 'dev2' at the same time.
Did you intend to checkout 'origin/dev2' which can not be resolved as commit?
需要先执行 git fetch （更新远程代码到本地仓库）

6.git add -f

7.在git中不检查文件权限
在git库中 .git文件夹下的config文件中的filemode = false

8.git tag 打标签
1) 显示所有的tag
git tag
2) 打标签
轻量级的（lightweight）
git tag [tagname]
含附注的（annotated）
git tag -a [tagname] -m "注释"
3) 显示标签的修改
git show [tagname]
4) 将tag推送到远端服务器上
git push origin [tagname]
5) 删除标签
git tag -d [tagname]
6) 删除远程标签
git push origin :refs/tags/[tagname]

9. git删除远程仓库的文件或目录
git rm -r --cached a/2.txt
git commit -m "rmove file"
git push

10. 删除git add 的文件
一种是 git rm --cached "文件路径"，不删除物理文件，仅将该文件从缓存中删除；
一种是 git rm --f "文件路径"，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。

当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用

1 git rm file_path
2 git commit -m 'delete somefile'
3 git push
当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用

git rm --cached file_path
git commit -m 'delete remote somefile'
git push

11. 指定主机，和私钥
1)在.ssh文件夹下新建config文件
2)在config文件中添加如下信息
host gitsrv
user git
hostname 172.16.0.6
identityfile ~/.ssh/steven

12. 查看某个文件的修改记录
git log -p 文件名

13. 产看某次提交的修改
git show <commit-hashId> 便可以显示某次提交的修改内容
git show <commit-hashId> filename 可以显示某次提交的某个内容的修改信息。

14. 空文件夹的提交
1. 必须在空文件夹下面有文件.gitkeep文件后缀就是天生来解决这个问题的。
